<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-12T15:59:03.391Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java bean</title>
    <link href="http://example.com/2023/01/12/java-bean/"/>
    <id>http://example.com/2023/01/12/java-bean/</id>
    <published>2023-01-12T15:24:41.000Z</published>
    <updated>2023-01-12T15:59:03.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是java-bean"><a href="#什么是java-bean" class="headerlink" title="什么是java bean"></a>什么是java bean</h3><ol><li><p>bean是对象；</p></li><li><p>由Spring中一个叫loC的东西管理；</p></li><li><p>我们的应用程序由一个一个bean构成；</p></li></ol><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>Bean在Spring中的某种行为模式：</p><p>Bean对象是默认的单例作用域，如果有任何地方有任何修改了这个单例的对象，那么其他类再调用就会得到一个修改后的值；</p><h5 id="作用域分类"><a href="#作用域分类" class="headerlink" title="作用域分类"></a>作用域分类</h5><ol><li><p>singleton：单例作用域；</p></li><li><p>prototype：原型作用域；</p></li><li><p>request：请求作用域；</p></li><li><p>session： 会话作用域；</p></li><li><p>application：全局作用域；</p></li></ol><p>后三种作用域，只适用于Spring MVC框架；</p><h5 id="bean规范"><a href="#bean规范" class="headerlink" title="bean规范"></a>bean规范</h5><ol><li><p>所有属性为private；</p></li><li><p>提供默认构造方法；</p></li><li><p>提供setter和getter；</p></li><li><p>实现serializable接口；</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是java-bean&quot;&gt;&lt;a href=&quot;#什么是java-bean&quot; class=&quot;headerlink&quot; title=&quot;什么是java bean&quot;&gt;&lt;/a&gt;什么是java bean&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;bean是对象；&lt;/p&gt;
&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>lombok</title>
    <link href="http://example.com/2023/01/11/lombok/"/>
    <id>http://example.com/2023/01/11/lombok/</id>
    <published>2023-01-11T14:05:55.000Z</published>
    <updated>2023-01-12T14:53:06.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何使用Lombok"><a href="#如何使用Lombok" class="headerlink" title="如何使用Lombok"></a>如何使用Lombok</h3><p>在java中使用lombok消除Java的冗长，尤其是对于简单的Java对象(POJO), 它通过注释实现这一目的。</p><p>lombok使用注解简化了java中属性的setter和getter等方法；</p><h5 id="添加lombok依赖"><a href="#添加lombok依赖" class="headerlink" title="添加lombok依赖"></a>添加lombok依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="Lombok注解"><a href="#Lombok注解" class="headerlink" title="Lombok注解"></a>Lombok注解</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Data：注解在类上，将类提供的所有属性都添加get、set方法，并添加、equals</span><br></pre></td></tr></table></figure><p>普通的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>使用lombok</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;如何使用Lombok&quot;&gt;&lt;a href=&quot;#如何使用Lombok&quot; class=&quot;headerlink&quot; title=&quot;如何使用Lombok&quot;&gt;&lt;/a&gt;如何使用Lombok&lt;/h3&gt;&lt;p&gt;在java中使用lombok消除Java的冗长，尤其是对于简单的Java对象</summary>
      
    
    
    
    
    <category term="lombok" scheme="http://example.com/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>本地项目添加到github</title>
    <link href="http://example.com/2023/01/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0%E5%88%B0github/"/>
    <id>http://example.com/2023/01/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0%E5%88%B0github/</id>
    <published>2023-01-08T16:22:53.000Z</published>
    <updated>2023-01-08T17:56:57.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本篇要解决的问题是：如何把本地项目提交到git"><a href="#本篇要解决的问题是：如何把本地项目提交到git" class="headerlink" title="本篇要解决的问题是：如何把本地项目提交到git"></a>本篇要解决的问题是：如何把本地项目提交到git</h3><ol><li><p>首先，在github生成新的仓库；</p></li><li><p>赋值仓库链接；</p></li><li></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;本篇要解决的问题是：如何把本地项目提交到git&quot;&gt;&lt;a href=&quot;#本篇要解决的问题是：如何把本地项目提交到git&quot; class=&quot;headerlink&quot; title=&quot;本篇要解决的问题是：如何把本地项目提交到git&quot;&gt;&lt;/a&gt;本篇要解决的问题是：如何把本地项目</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>mac</title>
    <link href="http://example.com/2023/01/08/mac/"/>
    <id>http://example.com/2023/01/08/mac/</id>
    <published>2023-01-08T15:52:47.000Z</published>
    <updated>2023-01-08T15:52:47.261Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>mac-github</title>
    <link href="http://example.com/2023/01/08/mac-github/"/>
    <id>http://example.com/2023/01/08/mac-github/</id>
    <published>2023-01-08T15:51:58.000Z</published>
    <updated>2023-01-08T15:51:58.186Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>springboot-01</title>
    <link href="http://example.com/2023/01/07/springboot-01/"/>
    <id>http://example.com/2023/01/07/springboot-01/</id>
    <published>2023-01-07T13:01:53.000Z</published>
    <updated>2023-01-07T13:02:52.083Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/Users/xiaomeichen/Library/Application%20Support/marktext/images/2023-01-07-21-02-50-image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/Users/xiaomeichen/Library/Application%20Support/marktext/images/2023-01-07-21-02-50-image.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="springboot" scheme="http://example.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-01</title>
    <link href="http://example.com/2022/12/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-01/"/>
    <id>http://example.com/2022/12/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-01/</id>
    <published>2022-12-30T14:34:24.000Z</published>
    <updated>2023-01-11T14:07:45.245Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据结构-算法-x3D-解决问题"><a href="#数据结构-算法-x3D-解决问题" class="headerlink" title="数据结构+算法&#x3D;解决问题"></a>数据结构+算法&#x3D;解决问题</h4><h4 id="数据结构分为"><a href="#数据结构分为" class="headerlink" title="数据结构分为"></a>数据结构分为</h4><ol><li><p>线性结构</p><p>数组、队列、链表和栈；</p></li><li><p>非线性结构</p><p>二维数组、多维数组、广义表、树结构、图结构；</p></li></ol><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><p>稀疏数组</p><p>如下：</p><table><thead><tr><th align="center">0</th><th align="center">0</th><th>0</th><th>0</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td>0</td><td>0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td>2</td><td>0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td>0</td><td>0</td><td align="center">0</td></tr></tbody></table><table><thead><tr><th></th><th>row</th><th>col</th><th>val</th></tr></thead><tbody><tr><td>0</td><td>4</td><td>5</td><td>2</td></tr><tr><td>1</td><td>1</td><td>2</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td><td>2</td></tr></tbody></table><p>二维数组转稀疏数组的思路</p><ol><li><p>遍历原始的二维数组，得到有效数据的个数sum</p></li><li><p>根据sum就可以创建稀疏数组spareseArr int[sum+1][3]</p></li><li><p>将二维数组的有效数据存入稀疏数组</p></li></ol><p>稀疏数组转二维数组的思路</p><ol><li><p>先读取数组的第一行，根据第一行的数据，创建原属的二维数组，比如上面的chessArr2&#x3D;int[11][11]</p></li><li><p>在读取稀疏数组后几行的数据，并赋给原始的二维数组即可；</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;数据结构-算法-x3D-解决问题&quot;&gt;&lt;a href=&quot;#数据结构-算法-x3D-解决问题&quot; class=&quot;headerlink&quot; title=&quot;数据结构+算法&amp;#x3D;解决问题&quot;&gt;&lt;/a&gt;数据结构+算法&amp;#x3D;解决问题&lt;/h4&gt;&lt;h4 id=&quot;数据结构分为&quot;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>flnik-window</title>
    <link href="http://example.com/2022/12/20/flnik-window/"/>
    <id>http://example.com/2022/12/20/flnik-window/</id>
    <published>2022-12-20T14:49:55.000Z</published>
    <updated>2022-12-21T14:01:02.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="window-窗口"><a href="#window-窗口" class="headerlink" title="window 窗口"></a>window 窗口</h3><ul><li>把无限流中切割为有限流的方式，它会将流数据分发到有限大小的桶（bucket）中进行分析；</li></ul><ol><li><p>时间窗口</p><ul><li><p>滚动时间窗口</p></li><li><p>滑动时间窗口</p></li><li><p>会话窗口</p></li></ul></li><li><p>计数窗口</p><ul><li><p>滚动计数窗口</p></li><li><p>滑动计数窗口</p></li></ul></li></ol><h3 id="滚动窗口（Tumbling-windows）"><a href="#滚动窗口（Tumbling-windows）" class="headerlink" title="滚动窗口（Tumbling windows）"></a>滚动窗口（Tumbling windows）</h3><ul><li><p>将数据依据固定的窗口长度对数据进行切分；</p></li><li><p>时间对齐，窗口长度固定，没有重叠；</p></li></ul><h3 id="滑动窗口（Sliding-Windows）"><a href="#滑动窗口（Sliding-Windows）" class="headerlink" title="滑动窗口（Sliding Windows）"></a>滑动窗口（Sliding Windows）</h3><ul><li><p>滑动窗口是固定窗口的更广泛的一种形式，滑动窗口由固定的窗口长度和滑动间隔组成</p></li><li><p>窗口长度固定，可以重叠；</p></li></ul><h3 id="会话窗口（Session-Windows）"><a href="#会话窗口（Session-Windows）" class="headerlink" title="会话窗口（Session Windows）"></a>会话窗口（Session Windows）</h3><ul><li><p>由一系列事件组合一个指定时间长度的timeout间隙组成，也就是一段时间没有接收到新数据就会生成新的窗口；</p></li><li><p>特点：时间无对齐</p></li></ul><h3 id="Window-API"><a href="#Window-API" class="headerlink" title="Window API"></a>Window API</h3><h3 id="窗口函数（windows-function）"><a href="#窗口函数（windows-function）" class="headerlink" title="窗口函数（windows function）"></a>窗口函数（windows function）</h3><ul><li><p>window function定义了要对窗口手机的数据做计算操作</p></li><li><p>可以分为两类：</p><ul><li><p>增量聚合函数</p><ul><li><p>每条数据到来就计算，保存一个简单状态</p></li><li><p>ReduceFunction AggregateFunction</p></li></ul></li><li><p>全窗口函数</p><ul><li><p>先把窗口所有数据收集起来，等到计算的时候会遍历所有数据</p></li><li><p>ProcessWindowsFunction，WindowFunction</p></li></ul></li></ul></li></ul><h2 id="时间语义函数"><a href="#时间语义函数" class="headerlink" title="时间语义函数"></a>时间语义函数</h2><h3 id="水位线（waterMark）"><a href="#水位线（waterMark）" class="headerlink" title="水位线（waterMark）"></a>水位线（waterMark）</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;window-窗口&quot;&gt;&lt;a href=&quot;#window-窗口&quot; class=&quot;headerlink&quot; title=&quot;window 窗口&quot;&gt;&lt;/a&gt;window 窗口&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;把无限流中切割为有限流的方式，它会将流数据分发到有限大小的桶（bucke</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>flink-sink</title>
    <link href="http://example.com/2022/12/18/flink-sink/"/>
    <id>http://example.com/2022/12/18/flink-sink/</id>
    <published>2022-12-18T14:17:28.000Z</published>
    <updated>2022-12-19T13:42:25.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flink连接kafka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主函数中调用</span></span><br><span class="line"><span class="type">FlinkJedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlinkJedisPoolConfig</span>.Builder()</span><br><span class="line">.setHost(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">.setPort(<span class="number">6379</span>)</span><br><span class="line">.build();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;kafka&quot;&gt;&lt;a href=&quot;#kafka&quot; class=&quot;headerlink&quot; title=&quot;kafka&quot;&gt;&lt;/a&gt;kafka&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>flink数据类型</title>
    <link href="http://example.com/2022/12/18/flink%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2022/12/18/flink%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-12-18T08:58:56.000Z</published>
    <updated>2022-12-18T13:50:47.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="1-基础数据类型"><a href="#1-基础数据类型" class="headerlink" title="1. 基础数据类型"></a>1. 基础数据类型</h3><p>Flink 支持所有的 Java 和 Scala 基础数据类型，Int, Double, Long, String, …；</p><h3 id="2-Java和Scala元组（Tuple）"><a href="#2-Java和Scala元组（Tuple）" class="headerlink" title="2. Java和Scala元组（Tuple）"></a>2. Java和Scala元组（Tuple）</h3><h3 id="3-Scala样例类（case-classes）"><a href="#3-Scala样例类（case-classes）" class="headerlink" title="3. Scala样例类（case classes）"></a>3. Scala样例类（case classes）</h3><h3 id="4-Java-简单对象-POJOs"><a href="#4-Java-简单对象-POJOs" class="headerlink" title="4. Java 简单对象(POJOs)"></a>4. Java 简单对象(POJOs)</h3><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h3><p>Arrays, Lists, Maps, Enums, 等等；</p><h2 id="实现-FLink-UDF-函数——更细粒度的控制流"><a href="#实现-FLink-UDF-函数——更细粒度的控制流" class="headerlink" title="实现 FLink UDF 函数——更细粒度的控制流"></a>实现 FLink UDF 函数——更细粒度的控制流</h2><h3 id="1-函数类-Function-Classes"><a href="#1-函数类-Function-Classes" class="headerlink" title="1. 函数类(Function Classes)"></a>1. 函数类(Function Classes)</h3><h3 id="2-匿名函数-Lambda-Functions"><a href="#2-匿名函数-Lambda-Functions" class="headerlink" title="2. 匿名函数(Lambda Functions)"></a>2. 匿名函数(Lambda Functions)</h3><h3 id="3-富函数-Rich-Functions"><a href="#3-富函数-Rich-Functions" class="headerlink" title="3. 富函数(Rich Functions)"></a>3. 富函数(Rich Functions)</h3><p>富函数是DataStream API提供的一个函数类的接口，所有Flink函数类都有其Rich版本。它与常规函数的不同就在于，可以获取运行环境的上下文，并拥有一些生命周期的方法，所以可以实现更复杂的功能；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;1-基础数据类型&quot;&gt;&lt;a href=&quot;#1-基础数据类型&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>Transform</title>
    <link href="http://example.com/2022/12/18/Transform/"/>
    <id>http://example.com/2022/12/18/Transform/</id>
    <published>2022-12-18T06:46:59.000Z</published>
    <updated>2023-01-11T14:07:49.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><p>一个分组数据留的聚合操作，合并当前元素的和上一次聚合的结果，产生一个新的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keyStream-&gt;DataStream</span></span><br></pre></td></tr></table></figure><h3 id="Split和Select"><a href="#Split和Select" class="headerlink" title="Split和Select"></a>Split和Select</h3><p>按照某种特征把DataSream拆分成两个或者多个DataStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DataStream-&gt;SlpitStream</span></span><br></pre></td></tr></table></figure><h3 id="Connect-amp-CoMap"><a href="#Connect-amp-CoMap" class="headerlink" title="Connect&amp;CoMap"></a>Connect&amp;CoMap</h3><p>DataStream → ConnectedStreams,连接两个保持他们类型的数据流，两个数据流被Connect之后，只是被放在了一个同一个流中，内部亦然保持各自的数据和形式不变化，两个流相互独立；</p><p>ConnectedStreams → DataStream，作用于ConnectedStream，功能与 map 和 flatMap 一样，对 ConnectedStreams 中的每一个 Stream 分别进行 map 和 flatMap 处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>DataStream → DataStream: 对两个或者两个以上的DataStream进行union操</p><p>作，产生一个包含所有 DataStream 元素的新 DataStream。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Reduce&quot;&gt;&lt;a href=&quot;#Reduce&quot; class=&quot;headerlink&quot; title=&quot;Reduce&quot;&gt;&lt;/a&gt;Reduce&lt;/h3&gt;&lt;p&gt;一个分组数据留的聚合操作，合并当前元素的和上一次聚合的结果，产生一个新的值。&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>flink流处理API</title>
    <link href="http://example.com/2022/12/14/flink%E6%B5%81%E5%A4%84%E7%90%86API/"/>
    <id>http://example.com/2022/12/14/flink%E6%B5%81%E5%A4%84%E7%90%86API/</id>
    <published>2022-12-14T13:14:09.000Z</published>
    <updated>2022-12-14T14:48:32.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flink流处理API流程"><a href="#Flink流处理API流程" class="headerlink" title="Flink流处理API流程"></a>Flink流处理API流程</h2><p><img src="/Users/xiaomeichen/Library/Application%20Support/marktext/images/2022-12-14-21-14-39-image.png"></p><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个执行环境，表示当前执行环境的上下文</span></span><br><span class="line"><span class="type">ExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line"><span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br></pre></td></tr></table></figure><h4 id="并行度设置"><a href="#并行度设置" class="headerlink" title="并行度设置"></a>并行度设置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//flink-conf.yaml中设置</span></span><br><span class="line"><span class="attr">parellesim.default:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="createLocalEnvironment"><a href="#createLocalEnvironment" class="headerlink" title="createLocalEnvironment"></a>createLocalEnvironment</h4><p>返回本地执行环境，需要在调用时指定默认的并行度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">LocalStreamEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.createLocalEnvironment(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="createRemoteEnvironment"><a href="#createRemoteEnvironment" class="headerlink" title="createRemoteEnvironment"></a>createRemoteEnvironment</h4><p>返回集群执行环境，将 Jar 提交到远程服务器。需要在调用时指定 JobManager 的 IP 和端口号，并指定要在集群中运行的 Jar 包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span>StreamExecutionEnvironment.createRemoteEnvironment(</span><br><span class="line"><span class="string">&quot;jobmanage-hostname&quot;</span>, <span class="number">6123</span>,<span class="string">&quot;YOURPATH//WordCount.jar&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><h3 id="从集合读取数据"><a href="#从集合读取数据" class="headerlink" title="从集合读取数据"></a>从集合读取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceTest1_Collection</span> &#123;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;<span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span>StreamExecutionEnvironment.getExecutionEnvironment();<span class="comment">// 1.Source:从集合读取数据</span>DataStream&lt;SensorReading&gt; sensorDataStream = env.fromCollection(Arrays.asList(<span class="keyword">new</span> <span class="title class_">SensorReading</span>(<span class="string">&quot;sensor_1&quot;</span>, <span class="number">1547718199L</span>, <span class="number">35.8</span>),<span class="keyword">new</span> <span class="title class_">SensorReading</span>(<span class="string">&quot;sensor_6&quot;</span>, <span class="number">1547718201L</span>, <span class="number">15.4</span>),<span class="keyword">new</span> <span class="title class_">SensorReading</span>(<span class="string">&quot;sensor_7&quot;</span>, <span class="number">1547718202L</span>, <span class="number">6.7</span>),<span class="keyword">new</span> <span class="title class_">SensorReading</span>(<span class="string">&quot;sensor_10&quot;</span>, <span class="number">1547718205L</span>, <span class="number">38.1</span>)));<span class="comment">// 2.打印</span>sensorDataStream.print();<span class="comment">// 3.执行</span>env.execute();&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="从文件读取数据"><a href="#从文件读取数据" class="headerlink" title="从文件读取数据"></a>从文件读取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; dataStream = env.readTextFile(<span class="string">&quot;YOUR_FILE_PATH &quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="以-kafka-消息队列的数据作为来源"><a href="#以-kafka-消息队列的数据作为来源" class="headerlink" title="以 kafka 消息队列的数据作为来源"></a>以 kafka 消息队列的数据作为来源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flink流处理API流程&quot;&gt;&lt;a href=&quot;#Flink流处理API流程&quot; class=&quot;headerlink&quot; title=&quot;Flink流处理API流程&quot;&gt;&lt;/a&gt;Flink流处理API流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/Users/xiaomeich</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>Flink运行架构</title>
    <link href="http://example.com/2022/12/13/Flink%E8%BF%90%E8%A1%8C%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2022/12/13/Flink%E8%BF%90%E8%A1%8C%E6%9E%B6%E6%9E%84/</id>
    <published>2022-12-12T16:20:43.000Z</published>
    <updated>2022-12-13T12:41:34.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flink运行时的组件"><a href="#Flink运行时的组件" class="headerlink" title="Flink运行时的组件"></a>Flink运行时的组件</h3><ol><li><p>作业管理器（JobManager）</p></li><li><p>任务管理器（TaskManager）</p></li><li><p>资源管理器（ResourceManager）</p></li><li><p>分发器（Dispatcher）</p></li></ol><h2 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h2><p><img src="/Users/xiaomeichen/Library/Application%20Support/marktext/images/2022-12-13-20-31-40-image.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Flink运行时的组件&quot;&gt;&lt;a href=&quot;#Flink运行时的组件&quot; class=&quot;headerlink&quot; title=&quot;Flink运行时的组件&quot;&gt;&lt;/a&gt;Flink运行时的组件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作业管理器（JobManager）&lt;/p&gt;
&lt;/l</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>flink-Yarn</title>
    <link href="http://example.com/2022/12/12/flink-Yarn/"/>
    <id>http://example.com/2022/12/12/flink-Yarn/</id>
    <published>2022-12-12T15:43:53.000Z</published>
    <updated>2022-12-12T16:05:08.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flink-on-Yarn"><a href="#Flink-on-Yarn" class="headerlink" title="Flink on Yarn"></a>Flink on Yarn</h2><ul><li>要求Flink是有Hadoop支持的版本，Hadoop环境需要2.2以上；</li></ul><h3 id="Session-cluster模式"><a href="#Session-cluster模式" class="headerlink" title="Session-cluster模式"></a>Session-cluster模式</h3><ul><li><p>先启动集群，yarn会申请一块空间后，资源保持不变，如果资源满了，下一个作业酒无法提交，只能等到yarn中的其中一个作业执行完成后，释放了资源，下一个作业才会正常提交；</p></li><li><p>所有作业共享Dispacher和ResourceManager：共享资源；</p></li><li><p>适合规模小执行时间短的作业；</p></li></ul><h3 id="Per-Job-Cluster模式"><a href="#Per-Job-Cluster模式" class="headerlink" title="Per-Job-Cluster模式"></a>Per-Job-Cluster模式</h3><ul><li><p>一个Job对应一个集群，没提交一个作业会根据自身情况都会单独向yarn申请资源，直到作业完成，一个作业的成功与否并不会影响到下一个作业的提交和运行；</p></li><li><p>独享Dispacher和ResourceManager，按需申请资源；</p></li><li><p>适合大规模长时间运行的作业；</p></li></ul><h2 id="Kubernetes部署"><a href="#Kubernetes部署" class="headerlink" title="Kubernetes部署"></a>Kubernetes部署</h2><ul><li><p>在K8s上构建Flink Session Cluster，需要将集群的组件对应的docker镜像分别在k8s上启动，包括JobManager、TaskManager、JobManagerServer三个镜像服务；</p></li><li><p>启动Flink Session Cluster</p></li><li><p>访问FlinkUI页面</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flink-on-Yarn&quot;&gt;&lt;a href=&quot;#Flink-on-Yarn&quot; class=&quot;headerlink&quot; title=&quot;Flink on Yarn&quot;&gt;&lt;/a&gt;Flink on Yarn&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;要求Flink是有Hadoop支持的版本</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>flink-standalone</title>
    <link href="http://example.com/2022/12/12/flink-standalone/"/>
    <id>http://example.com/2022/12/12/flink-standalone/</id>
    <published>2022-12-12T15:42:46.000Z</published>
    <updated>2022-12-18T06:46:03.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StandAlone"><a href="#StandAlone" class="headerlink" title="StandAlone"></a>StandAlone</h2><p>单机模式，没有集群模式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;StandAlone&quot;&gt;&lt;a href=&quot;#StandAlone&quot; class=&quot;headerlink&quot; title=&quot;StandAlone&quot;&gt;&lt;/a&gt;StandAlone&lt;/h2&gt;&lt;p&gt;单机模式，没有集群模式&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>如何本地代码上传github</title>
    <link href="http://example.com/2022/12/11/git/"/>
    <id>http://example.com/2022/12/11/git/</id>
    <published>2022-12-11T15:58:24.000Z</published>
    <updated>2022-12-14T13:13:22.749Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>flink-WordCount</title>
    <link href="http://example.com/2022/12/11/flink-WordCount/"/>
    <id>http://example.com/2022/12/11/flink-WordCount/</id>
    <published>2022-12-11T14:22:36.000Z</published>
    <updated>2022-12-11T15:55:32.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java实现flink简单上手项目"><a href="#java实现flink简单上手项目" class="headerlink" title="java实现flink简单上手项目"></a>java实现flink简单上手项目</h2><h3 id="批处理任务"><a href="#批处理任务" class="headerlink" title="批处理任务"></a>批处理任务</h3><h3 id="流处理任务"><a href="#流处理任务" class="headerlink" title="流处理任务"></a>流处理任务</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;java实现flink简单上手项目&quot;&gt;&lt;a href=&quot;#java实现flink简单上手项目&quot; class=&quot;headerlink&quot; title=&quot;java实现flink简单上手项目&quot;&gt;&lt;/a&gt;java实现flink简单上手项目&lt;/h2&gt;&lt;h3 id=&quot;批处理任务</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>flink</title>
    <link href="http://example.com/2022/12/10/flink/"/>
    <id>http://example.com/2022/12/10/flink/</id>
    <published>2022-12-10T09:47:00.000Z</published>
    <updated>2022-12-11T14:21:11.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flink本地部署单节点"><a href="#flink本地部署单节点" class="headerlink" title="flink本地部署单节点"></a>flink本地部署单节点</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><h2 id="flink特点"><a href="#flink特点" class="headerlink" title="flink特点"></a>flink特点</h2><ul><li><p>处理有界数据和无界数据</p></li><li><p>低延迟</p></li><li><p>高吞吐</p></li><li><p>结果的准确性和良好的容错性</p></li></ul><h2 id="使用flink行业"><a href="#使用flink行业" class="headerlink" title="使用flink行业"></a>使用flink行业</h2><ul><li><p>电商和市场营销</p><p>数据报表、广告投放、业务流程需要；</p></li><li><p>物联网</p><p>传感器实时数据采集和显示、实时报警、交通运输业；</p></li><li><p>电信业</p><p>基站流量调配；</p></li><li><p>银行和金融业</p><p>实时结算和通知推送，实时检测异常行为；</p></li></ul><h2 id="传统数据处理架构"><a href="#传统数据处理架构" class="headerlink" title="传统数据处理架构"></a>传统数据处理架构</h2><p><img src="/Users/xiaomeichen/Library/Application%20Support/marktext/images/2022-12-10-18-28-37-image.png"></p><h2 id="有状态的流式处理"><a href="#有状态的流式处理" class="headerlink" title="有状态的流式处理"></a>有状态的流式处理</h2><p><img src="/Users/xiaomeichen/Library/Application%20Support/marktext/images/2022-12-10-18-32-24-image.png"></p><h2 id="流处理的演变"><a href="#流处理的演变" class="headerlink" title="流处理的演变"></a>流处理的演变</h2><ul><li><p>lambda演变（流批一体）</p><ol><li><p>用两套系统，同事保持低延迟和结果准确</p></li><li><p>保存着流处理和批处理的架构</p></li><li><p>先攒一批再处理</p></li><li><p>痛处：维护不同的系统时当架构发生变化，维护、开发成本变大，因为需要同时改变两套框架的处理方式，如：API用法；</p></li></ol><p><img src="/Users/xiaomeichen/Library/Application%20Support/marktext/images/2022-12-10-18-44-37-image.png"></p></li></ul><h2 id="Flink的主要特点"><a href="#Flink的主要特点" class="headerlink" title="Flink的主要特点"></a>Flink的主要特点</h2><p><img src="/Users/xiaomeichen/Library/Application%20Support/marktext/images/2022-12-11-13-01-20-image.png"></p><h2 id="分层API"><a href="#分层API" class="headerlink" title="分层API"></a>分层API</h2><ul><li><p>越顶层越抽象，表达含义越简明，使用越方便</p></li><li><p>越底层越具体，表达能力越丰富，使用越灵活</p></li></ul><p><img src="/Users/xiaomeichen/Library/Application%20Support/marktext/images/2022-12-11-13-06-30-image.png"></p><h2 id="Flink其他特点"><a href="#Flink其他特点" class="headerlink" title="Flink其他特点"></a>Flink其他特点</h2><ul><li><p>支持时间时间和处理时间语义；</p></li><li><p>精确一次的状态一致性保证；</p></li><li><p>低延迟，每秒处理数百万个事件，毫秒级延迟；</p></li><li><p>与众多常用存储系统的连接；</p></li><li><p>高可用，动态扩展，实现7*24小时全天候运行；</p></li></ul><p>Flink vs Spark Stearming</p><ul><li><p>流和微批</p><ul><li><p>spark的微批把攒批的时间定的很小，达到秒级处理，但是结构还是批处理；</p></li><li><p>Flink就是流数据处理的架构过程；</p></li></ul></li><li><p>数据模型</p><ul><li><p>Spark采用RDD模型，spark streaming的DStrean实际上也就是一组组小批数据RDD的集合；</p></li><li><p>Flink基本数据模型是数据流，以及事件序列；</p></li></ul></li><li><p>运行时架构</p><ul><li><p>spark是批计算，将DAG划分为不同的stage，一个完成后才可以计算下一个；</p></li><li><p>flink是标砖的流执行模式，一个事件在一个节点处理完成后可以直接发往下一个节点进行处理；</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flink本地部署单节点&quot;&gt;&lt;a href=&quot;#flink本地部署单节点&quot; class=&quot;headerlink&quot; title=&quot;flink本地部署单节点&quot;&gt;&lt;/a&gt;flink本地部署单节点&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="flink" scheme="http://example.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>Load Balance</title>
    <link href="http://example.com/2022/12/04/Load-Balance/"/>
    <id>http://example.com/2022/12/04/Load-Balance/</id>
    <published>2022-12-03T17:00:34.000Z</published>
    <updated>2022-12-03T17:24:47.259Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h3><p>负载均衡就是一种机制，一个算法，用于解决分担一个机器无法完成而分到等多个机器上一起解决的问题。</p><h3 id="flume和负载均衡的产生背景"><a href="#flume和负载均衡的产生背景" class="headerlink" title="flume和负载均衡的产生背景"></a>flume和负载均衡的产生背景</h3><p>从数据源到中间多台flume再到数据存储的过程中，当两个以上flume串联的使用时，会因为两个flume机器能力不一样而产生问题。比如一个机器每秒处理100个event而一个机器每秒处理10个event，这两配合一起工作时间长了，会形成数据堵塞的问题。</p><p>一个agent解决不了的问题，可以多个agent解决问题，这就是flume中遇到的负载均衡的产生背景；</p><h3 id="flume负载均衡算法"><a href="#flume负载均衡算法" class="headerlink" title="flume负载均衡算法"></a>flume负载均衡算法</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是负载均衡&quot;&gt;&lt;a href=&quot;#什么是负载均衡&quot; class=&quot;headerlink&quot; title=&quot;什么是负载均衡&quot;&gt;&lt;/a&gt;什么是负载均衡&lt;/h3&gt;&lt;p&gt;负载均衡就是一种机制，一个算法，用于解决分担一个机器无法完成而分到等多个机器上一起解决的问题。&lt;/p</summary>
      
    
    
    
    
    <category term="负载均衡" scheme="http://example.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>flume-failover</title>
    <link href="http://example.com/2022/12/04/flume-failover/"/>
    <id>http://example.com/2022/12/04/flume-failover/</id>
    <published>2022-12-03T16:13:41.000Z</published>
    <updated>2022-12-03T16:29:54.222Z</updated>
    
    <content type="html"><![CDATA[<h3 id="failover和负载均衡"><a href="#failover和负载均衡" class="headerlink" title="failover和负载均衡"></a>failover和负载均衡</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;failover和负载均衡&quot;&gt;&lt;a href=&quot;#failover和负载均衡&quot; class=&quot;headerlink&quot; title=&quot;failover和负载均衡&quot;&gt;&lt;/a&gt;failover和负载均衡&lt;/h3&gt;</summary>
      
    
    
    
    
    <category term="flume" scheme="http://example.com/tags/flume/"/>
    
  </entry>
  
</feed>
